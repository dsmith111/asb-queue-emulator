// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteMessageHandlerFunc turns a function with the right signature into a delete message handler
type DeleteMessageHandlerFunc func(DeleteMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMessageHandlerFunc) Handle(params DeleteMessageParams) middleware.Responder {
	return fn(params)
}

// DeleteMessageHandler interface for that can handle valid delete message params
type DeleteMessageHandler interface {
	Handle(DeleteMessageParams) middleware.Responder
}

// NewDeleteMessage creates a new http.Handler for the delete message operation
func NewDeleteMessage(ctx *middleware.Context, handler DeleteMessageHandler) *DeleteMessage {
	return &DeleteMessage{Context: ctx, Handler: handler}
}

/* DeleteMessage swagger:route DELETE /{queueName}/messages/{messageId}/{lockToken} deleteMessage

DeleteMessage delete message API

*/
type DeleteMessage struct {
	Context *middleware.Context
	Handler DeleteMessageHandler
}

func (o *DeleteMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteMessageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
